# Entropy Matter, Automated Entropy Packages Build Service, example spec file

# List of packages required to be built.
# Comma separated, example: app-foo/bar, bar-baz/foo
# Mandatory, cannot be empty
packages:
	virtual/perl-Archive-Tar,
	virtual/perl-Attribute-Handlers,
	virtual/perl-AutoLoader,
	virtual/perl-CPAN-Meta,
	virtual/perl-CPAN-Meta-Requirements,
	virtual/perl-CPAN-Meta-YAML,
	virtual/perl-Class-ISA,
	virtual/perl-Compress-Raw-Bzip2,
	virtual/perl-Compress-Raw-Zlib,
	virtual/perl-DB_File,
	virtual/perl-Data-Dumper,
	virtual/perl-Digest-MD5,
	virtual/perl-Digest-SHA,
	virtual/perl-Encode,
	virtual/perl-ExtUtils-CBuilder,
	virtual/perl-ExtUtils-Command,
	virtual/perl-ExtUtils-Constant,
	virtual/perl-ExtUtils-Install,
	virtual/perl-ExtUtils-MakeMaker,
	virtual/perl-ExtUtils-Manifest,
	virtual/perl-ExtUtils-ParseXS,
	virtual/perl-File-Path,
	virtual/perl-File-Spec,
	virtual/perl-File-Temp,
	virtual/perl-Getopt-Long,
	virtual/perl-IO,
	virtual/perl-IO-Compress,
	virtual/perl-IO-Zlib,
	virtual/perl-IPC-Cmd,
	virtual/perl-JSON-PP,
	virtual/perl-Locale-Maketext-Simple,
	virtual/perl-MIME-Base64,
	virtual/perl-Math-BigInt,
	virtual/perl-Math-BigInt-FastCalc,
	virtual/perl-Memoize,
	virtual/perl-Module-Build,
	virtual/perl-Module-CoreList,
	virtual/perl-Module-Load,
	virtual/perl-Module-Load-Conditional,
	virtual/perl-Module-Loaded,
	virtual/perl-Module-Metadata,
	virtual/perl-Module-Pluggable,
	virtual/perl-Params-Check,
	virtual/perl-Parse-CPAN-Meta,
	virtual/perl-Perl-OSType,
	virtual/perl-Pod-Escapes,
	virtual/perl-Pod-Simple,
	virtual/perl-Pod-Parser,
	virtual/perl-Scalar-List-Utils,
	virtual/perl-Socket,
	virtual/perl-Storable,
	virtual/perl-Sys-Syslog,
	virtual/perl-Term-ANSIColor,
	virtual/perl-Test-Harness,
	virtual/perl-Test-Simple,
	virtual/perl-Text-Balanced,
	virtual/perl-Thread-Queue,
	virtual/perl-Time-HiRes,
	virtual/perl-Time-Local,
	virtual/perl-Time-Piece,
	virtual/perl-Version-Requirements,
	virtual/perl-XSLoader,
	virtual/perl-Digest,
	virtual/perl-I18N-LangTags,
	virtual/perl-libnet,
	virtual/perl-Locale-Maketext,
	virtual/perl-Net-Ping,
	virtual/perl-parent,
	virtual/perl-threads,
	virtual/perl-threads-shared,
	virtual/perl-version,

# Enforce stable or unstable packages on emerge.
# yes = only stable packages are accepted
# no  = both stable and unstable packages are accepted
# inherit = inherit portage make.conf.* settings for ACCEPT_KEYWORDS
# Valid values are either "yes" or "no", "inherit"
# Default is: inherit
stable: inherit

# Entropy repository where to commit packages
# Mandatory, cannot be empty
repository: sabayon-hell

# Provide custom build arguments to Portage.
# Default is: --verbose --nospinner
# --ask and --buildpkgonly are not allowed and automatically filtered.
build-args: --verbose --oneshot --nospinner --quiet-build=y --quiet-fail --fail-clean=y --complete-graph

# Only build the packages without merging them into the system.
# Valid values are either "yes" or "no"
# Default is: no
# build-only: no

# Drop older packages in the same slot when adding an injected package.
# Injected packages come into play when 'build-only: yes'
# Default is: no
# drop-old-injected: no

# Allow Source Package Manager (Portage) repository change?
# Valid values are either "yes" or "no"
# Default is: no
spm-repository-change: no

# In case of Source Package Manager repository change, allow
# execution if the original repository does not contain
# the package anymore?
# Valid values are either "yes" or "no"
# Default is: no
spm-repository-change-if-upstreamed: yes

# Allow compiling package even if it's not actually installed on system?
# Valid values are either "yes" or "no"
# Default is: no
not-installed: no

# Allow soft-blockers in the merge queue? Packages will be unmerged if yes.
# Valid values are either "yes" or "no"
# Default is: yes
soft-blocker: yes

# Allow package unmerges in the merge queue? Packages will be unmerged if yes.
# Valid values are either "yes" or "no"
# Default is: yes
unmerge: yes

# Allow dependencies to be pulled in?
# Valid values are either "yes" or "no"
# Default is: no
dependencies: yes

# Allow package downgrade?
# Valid values are either "yes" or "no"
# Default is: no
downgrade: no

# Allow package rebuild?
# Valid values are either "yes" or "no"
# Default is: no
rebuild: no

# Make possible to continue if one or more packages fail to build?
# Valid values are either "yes" or "no"
# Default is: no
keep-going: yes

# Allow new USE flags?
# Valid values are either "yes" or "no"
# Default is: no
new-useflags: yes

# Allow removed USE flags?
# Valid values are either "yes" or "no"
# Default is: no
removed-useflags: yes

# Package pre execution script hook
# Valid value is path to executable file
# Env vars:
# MATTER_PACKAGE_NAMES       = space sep. list of names of the packages
# that would be built. It does not reflect the name of the failing packages,
# because they could be just dependencies of them.
# pkgpre: /home/fabio/repos/entropy/services/matter_examples/pkgpre.sh

# Package build post execution script hook, executed for each package
# Valid value is path to executable file
# Env vars:
# MATTER_PACKAGE_NAMES       = space sep. list of names of the packages
# that would be built. It does not reflect the name of the failing packages,
# because they could be just dependencies of them.
# pkgpost: /home/fabio/repos/entropy/services/matter_examples/pkgpost.sh

# Env vars:
# MATTER_PACKAGE_NAMES       = space sep. list of names of the packages
# that would be built. It does not reflect the name of the failing packages,
# because they could be just dependencies of them.
# MATTER_PORTAGE_FAILED_PACKAGE_NAME = exact name (atom, CPV) of the failing
# package, the one that triggered the buildfail hook.
# MATTER_PORTAGE_REPOSITORY = Portage repository from where the package
# comes from
# MATTER_PORTAGE_BUILD_LOG_DIR = directory containing all the build logs of
# the failed package
buildfail: /particles/hooks/buildfail.sh

# For more info regarding exported environment variables, please see:
# matter --help
