# Entropy Matter, Automated Entropy Packages Build Service, example spec file

# List of packages required to be built.
# Comma separated, example: app-foo/bar, bar-baz/foo
# Mandatory, cannot be empty
packages:
	dev-embedded/arduino,
	dev-embedded/avarice,
	dev-embedded/avra,
	dev-embedded/avrdude,
	dev-embedded/bitbake,
	dev-embedded/dc-tool-ip,
	dev-embedded/ftdi_eeprom,
	dev-embedded/gnap-dev,
	dev-embedded/gnap-ext,
	dev-embedded/gnome-avrdude,
	dev-embedded/gpsim,
	dev-embedded/gpsim-lcd,
	dev-embedded/gputils,
	dev-embedded/icdprog,
	dev-embedded/include,
	dev-embedded/jal,
	dev-embedded/jtag,
	dev-embedded/libftd2xx,
	dev-embedded/libftdi,
	dev-embedded/msp430mcu,
	dev-embedded/mspdebug,
	dev-embedded/openocd,
	dev-embedded/parapin,
	dev-embedded/picasm,
	dev-embedded/picp,
	dev-embedded/picprog,
	dev-embedded/pista,
	dev-embedded/pk2cmd,
	dev-embedded/ponyprog,
	dev-embedded/powersoftplus-libftdi,
	dev-embedded/scratchbox,
	dev-embedded/scratchbox-devkit-apt-https,
	dev-embedded/scratchbox-devkit-cputransp,
	dev-embedded/scratchbox-devkit-debian,
	dev-embedded/scratchbox-devkit-debian-squeeze,
	dev-embedded/scratchbox-devkit-doctools,
	dev-embedded/scratchbox-devkit-git,
	dev-embedded/scratchbox-devkit-maemo3,
	dev-embedded/scratchbox-devkit-perl,
	dev-embedded/scratchbox-devkit-qemu,
	dev-embedded/scratchbox-devkit-svn,
	dev-embedded/scratchbox2,
	dev-embedded/sdcc,
	dev-embedded/sgpp-lite-arm-eabi-bin,
	dev-embedded/sgpp-lite-arm-linux-bin,
	dev-embedded/sgpp-lite-arm-uclinux-bin,
	dev-embedded/srecord,
	dev-embedded/tavrasm,
	dev-embedded/tigcc,
	dev-embedded/u-boot-tools,
	dev-embedded/uisp,
	dev-embedded/upslug2,
	dev-embedded/usbprog,
	dev-embedded/zmac

# Entropy repository where to commit packages
# Mandatory, cannot be empty
repository: sabayon-hell

# Provide custom build arguments to Portage.
# Default is: --verbose --nospinner
build-args: --verbose --oneshot --nospinner --quiet-build=y --quiet-fail --fail-clean=y --complete-graph

# Allow Source Package Manager (Portage) repository change?
# Valid values are either "yes" or "no"
# Default is: no
spm-repository-change: no

# In case of Source Package Manager repository change, allow
# execution if the original repository does not contain
# the package anymore?
# Valid values are either "yes" or "no"
# Default is: no
spm-repository-change-if-upstreamed: yes

# Allow compiling package even if it's not actually installed on system?
# Valid values are either "yes" or "no"
# Default is: no
not-installed: no

# Allow dependencies to be pulled in?
# Valid values are either "yes" or "no"
# Default is: no
dependencies: yes

# Allow package downgrade?
# Valid values are either "yes" or "no"
# Default is: no
downgrade: no

# Allow package rebuild?
# Valid values are either "yes" or "no"
# Default is: no
rebuild: no

# Make possible to continue if one or more packages fail to build?
# Valid values are either "yes" or "no"
# Default is: no
keep-going: yes

# Allow new USE flags?
# Valid values are either "yes" or "no"
# Default is: no
new-useflags: yes

# Allow removed USE flags?
# Valid values are either "yes" or "no"
# Default is: no
removed-useflags: yes

# Package pre execution script hook
# Valid value is path to executable file
# Env vars:
# MATTER_PACKAGE_NAMES       = space sep. list of names of the packages
# that would be built. It does not reflect the name of the failing packages,
# because they could be just dependencies of them.
# pkgpre: /home/fabio/repos/entropy/services/matter_examples/pkgpre.sh

# Package build post execution script hook, executed for each package
# Valid value is path to executable file
# Env vars:
# MATTER_PACKAGE_NAMES       = space sep. list of names of the packages
# that would be built. It does not reflect the name of the failing packages,
# because they could be just dependencies of them.
# pkgpost: /home/fabio/repos/entropy/services/matter_examples/pkgpost.sh

# Env vars:
# MATTER_PACKAGE_NAMES       = space sep. list of names of the packages
# that would be built. It does not reflect the name of the failing packages,
# because they could be just dependencies of them.
# MATTER_PORTAGE_FAILED_PACKAGE_NAME = exact name (atom, CPV) of the failing
# package, the one that triggered the buildfail hook.
# MATTER_PORTAGE_REPOSITORY = Portage repository from where the package
# comes from
# MATTER_PORTAGE_BUILD_LOG_DIR = directory containing all the build logs of
# the failed package
buildfail: /particles/hooks/buildfail.sh

# For more info regarding exported environment variables, please see:
# matter --help
