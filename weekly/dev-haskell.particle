# Entropy Matter, Automated Entropy Packages Build Service, example spec file

# List of packages required to be built.
# Comma separated, example: app-foo/bar, bar-baz/foo
# Mandatory, cannot be empty
packages:
	dev-haskell/aeson,
	dev-haskell/alex,
	dev-haskell/alsa-core,
	dev-haskell/alsa-mixer,
	dev-haskell/alut,
	dev-haskell/ansi-terminal,
	dev-haskell/ansi-wl-pprint,
	dev-haskell/arrows,
	dev-haskell/attoparsec,
	dev-haskell/base-unicode-symbols,
	dev-haskell/base64-bytestring,
	dev-haskell/binary,
	dev-haskell/blaze-builder,
	dev-haskell/blaze-html,
	dev-haskell/blaze-markup,
	dev-haskell/bloomfilter,
	dev-haskell/bzlib,
	dev-haskell/c2hs,
	dev-haskell/cabal,
	dev-haskell/cabal-install,
	dev-haskell/cairo,
	dev-haskell/cereal,
	dev-haskell/cgi,
	dev-haskell/configfile,
	dev-haskell/convertible,
	dev-haskell/cpphs,
	dev-haskell/crypto,
	dev-haskell/curl,
	dev-haskell/data-default,
	dev-haskell/data-default-class,
	dev-haskell/data-default-instances-base,
	dev-haskell/data-default-instances-containers,
	dev-haskell/data-default-instances-dlist,
	dev-haskell/data-default-instances-old-locale,
	dev-haskell/dataenc,
	dev-haskell/dbus,
	dev-haskell/deepseq,
	dev-haskell/digest,
	dev-haskell/dlist,
	dev-haskell/drift,
	dev-haskell/edit-distance,
	dev-haskell/editline,
	dev-haskell/extensible-exceptions,
	dev-haskell/fgl,
	dev-haskell/frown,
	dev-haskell/ghc-paths,
	dev-haskell/gio,
	dev-haskell/glade,
	dev-haskell/glib,
	dev-haskell/gluraw,
	dev-haskell/glut,
	dev-haskell/gtk,
	dev-haskell/gtk2hs-buildtools,
	dev-haskell/haddock,
	dev-haskell/happy,
	dev-haskell/harp,
	dev-haskell/hashable,
	dev-haskell/hashed-storage,
	dev-haskell/hashtables,
	dev-haskell/haskeline,
	dev-haskell/haskell-src,
	dev-haskell/haskell-src-exts,
	dev-haskell/hdbc,
	dev-haskell/hdbc-odbc,
	dev-haskell/hdbc-postgresql,
	dev-haskell/hdbc-sqlite,
	dev-haskell/hexpat,
	dev-haskell/highlighting-kate,
	dev-haskell/hinotify,
	dev-haskell/hostname,
	dev-haskell/hs-bibutils,
	dev-haskell/hscolour,
	dev-haskell/hslogger,
	dev-haskell/hsql,
	dev-haskell/hsql-mysql,
	dev-haskell/hsql-odbc,
	dev-haskell/hsql-postgresql,
	dev-haskell/html,
	dev-haskell/http,
	dev-haskell/hunit,
	dev-haskell/iconv,
	dev-haskell/ifelse,
	dev-haskell/json,
	dev-haskell/language-c,
	dev-haskell/lazysmallcheck,
	dev-haskell/lhs2tex,
	dev-haskell/libxml-sax,
	dev-haskell/lifted-base,
	dev-haskell/list,
	dev-haskell/missingh,
	dev-haskell/mmap,
	dev-haskell/monad-control,
	dev-haskell/monadcatchio-mtl,
	dev-haskell/mtl,
	dev-haskell/network,
	dev-haskell/objectname,
	dev-haskell/openal,
	dev-haskell/opengl,
	dev-haskell/openglraw,
	dev-haskell/pandoc-types,
	dev-haskell/pango,
	dev-haskell/parallel,
	dev-haskell/parallel,
	dev-haskell/parsec,
	dev-haskell/pcap,
	dev-haskell/pcre-light,
	dev-haskell/primitive,
	dev-haskell/quickcheck,
	dev-haskell/random,
	dev-haskell/readline,
	dev-haskell/regex-base,
	dev-haskell/regex-compat,
	dev-haskell/regex-pcre-builtin,
	dev-haskell/regex-posix,
	dev-haskell/safesemaphore,
	dev-haskell/sha,
	dev-haskell/statevar,
	dev-haskell/stm,
	dev-haskell/stream,
	dev-haskell/strict,
	dev-haskell/syb,
	dev-haskell/tagsoup,
	dev-haskell/tar,
	dev-haskell/temporary,
	dev-haskell/tensor,
	dev-haskell/terminfo,
	dev-haskell/test-framework,
	dev-haskell/test-framework-hunit,
	dev-haskell/test-framework-quickcheck2,
	dev-haskell/testpack,
	dev-haskell/texmath,
	dev-haskell/text,
	dev-haskell/transformers,
	dev-haskell/transformers-base,
	dev-haskell/unordered-containers,
	dev-haskell/utf8-string,
	dev-haskell/uulib,
	dev-haskell/vector,
	dev-haskell/wxcore,
	dev-haskell/wxdirect,
	dev-haskell/wxdirect,
	dev-haskell/wxhaskell,
	dev-haskell/x11,
	dev-haskell/x11-xft,
	dev-haskell/xhtml,
	dev-haskell/xml,
	dev-haskell/xml-types,
	dev-haskell/zip-archive,
	dev-haskell/zlib,

# Entropy repository where to commit packages
# Mandatory, cannot be empty
repository: sabayon-hell

# Provide custom build arguments to Portage.
# Default is: --verbose --nospinner
build-args: --verbose --oneshot --nospinner --quiet-build=y --quiet-fail --fail-clean=y --complete-graph

# Allow Source Package Manager (Portage) repository change?
# Valid values are either "yes" or "no"
# Default is: no
spm-repository-change: no

# In case of Source Package Manager repository change, allow
# execution if the original repository does not contain
# the package anymore?
# Valid values are either "yes" or "no"
# Default is: no
spm-repository-change-if-upstreamed: yes

# Allow compiling package even if it's not actually installed on system?
# Valid values are either "yes" or "no"
# Default is: no
not-installed: no

# Allow dependencies to be pulled in?
# Valid values are either "yes" or "no"
# Default is: no
dependencies: yes

# Allow package downgrade?
# Valid values are either "yes" or "no"
# Default is: no
downgrade: no

# Allow package rebuild?
# Valid values are either "yes" or "no"
# Default is: no
rebuild: no

# Make possible to continue if one or more packages fail to build?
# Valid values are either "yes" or "no"
# Default is: no
keep-going: yes

# Allow new USE flags?
# Valid values are either "yes" or "no"
# Default is: no
new-useflags: yes

# Allow removed USE flags?
# Valid values are either "yes" or "no"
# Default is: no
removed-useflags: yes

# Package pre execution script hook
# Valid value is path to executable file
# Env vars:
# MATTER_PACKAGE_NAMES       = space sep. list of names of the packages
# that would be built. It does not reflect the name of the failing packages,
# because they could be just dependencies of them.
# pkgpre: /home/fabio/repos/entropy/services/matter_examples/pkgpre.sh

# Package build post execution script hook, executed for each package
# Valid value is path to executable file
# Env vars:
# MATTER_PACKAGE_NAMES       = space sep. list of names of the packages
# that would be built. It does not reflect the name of the failing packages,
# because they could be just dependencies of them.
# pkgpost: /home/fabio/repos/entropy/services/matter_examples/pkgpost.sh

# Env vars:
# MATTER_PACKAGE_NAMES       = space sep. list of names of the packages
# that would be built. It does not reflect the name of the failing packages,
# because they could be just dependencies of them.
# MATTER_PORTAGE_FAILED_PACKAGE_NAME = exact name (atom, CPV) of the failing
# package, the one that triggered the buildfail hook.
# MATTER_PORTAGE_REPOSITORY = Portage repository from where the package
# comes from
# MATTER_PORTAGE_BUILD_LOG_DIR = directory containing all the build logs of
# the failed package
buildfail: /particles/hooks/buildfail.sh

# For more info regarding exported environment variables, please see:
# matter --help
