# Entropy Matter, Automated Entropy Packages Build Service, example spec file

# List of packages required to be built.
# Comma separated, example: app-foo/bar, bar-baz/foo
# Mandatory, cannot be empty
packages:
	x11-libs/agg,
	x11-libs/c++-gtk-utils,
	x11-libs/colord-gtk,
	x11-libs/compiz-bcop,
	x11-libs/compizconfig-backend-gconf,
	x11-libs/dnd,
	x11-libs/flowcanvas,
	x11-libs/fltk,
	x11-libs/fox-wrapper,
	x11-libs/gdk-pixbuf,
	x11-libs/gksu,
	x11-libs/gl2ps,
	x11-libs/gnome-pty-helper,
	x11-libs/goffice,
	x11-libs/goffice,
	x11-libs/goocanvas,
	x11-libs/gtk+extra,
	x11-libs/gtkdatabox,
	x11-libs/gtkglarea,
	x11-libs/gtkglext,
	x11-libs/gtkhotkey,
	x11-libs/gtkmathview,
	x11-libs/gtksourceview,
	x11-libs/gtksourceview,
	x11-libs/guile-gtk,
	x11-libs/hippo-canvas,
	x11-libs/libast,
	x11-libs/libcompizconfig,
	x11-libs/libdesktop-agnostic,
	x11-libs/libdmx,
	x11-libs/libdockapp,
	x11-libs/libdrm,
	x11-libs/libfakekey,
	x11-libs/libfm,
	x11-libs/libfontenc,
	x11-libs/libgksu,
	x11-libs/libgxim,
	x11-libs/libiterm-mbt,
	x11-libs/libmatenotify,
	x11-libs/libnotify,
	x11-libs/liboglappth,
	x11-libs/libpciaccess,
	x11-libs/libproplist,
	x11-libs/libva,
	x11-libs/libva-intel-driver,
	x11-libs/libva-vdpau-driver,
	x11-libs/libvdpau,
	x11-libs/libwnck,
	x11-libs/libwnck,
	x11-libs/libxcb,
	x11-libs/libxkbcommon,
	x11-libs/libxkbfile,
	x11-libs/libxkbui,
	x11-libs/libxklavier,
	x11-libs/motif,
	x11-libs/mx,
	x11-libs/neXtaw,
	x11-libs/pango,
	x11-libs/pangox-compat,
	x11-libs/pixman,
	x11-libs/qtscriptgenerator,
	x11-libs/qwt,
	x11-libs/qwt,
	x11-libs/rep-gtk,
	x11-libs/startup-notification,
	x11-libs/tslib,
	x11-libs/vte,
	x11-libs/vte,
	x11-libs/wxGTK,
	x11-libs/xbae,
	x11-libs/xforms,
	x11-libs/xosd,
	x11-libs/xpa,
	x11-libs/xpyb,
	x11-libs/xtrans,
	x11-libs/xvba-sdk,
	x11-libs/xvba-video,

# Enforce stable or unstable packages on emerge.
# yes = only stable packages are accepted
# no  = both stable and unstable packages are accepted
# inherit = inherit portage make.conf.* settings for ACCEPT_KEYWORDS
# Valid values are either "yes" or "no", "inherit"
# Default is: inherit
stable: inherit

# Entropy repository where to commit packages
# Mandatory, cannot be empty
repository: sabayon-hell

# Provide custom build arguments to Portage.
# Default is: --verbose --nospinner
build-args: --verbose --oneshot --nospinner --quiet-build=y --quiet-fail --fail-clean=y --complete-graph

# Allow Source Package Manager (Portage) repository change?
# Valid values are either "yes" or "no"
# Default is: no
spm-repository-change: no

# In case of Source Package Manager repository change, allow
# execution if the original repository does not contain
# the package anymore?
# Valid values are either "yes" or "no"
# Default is: no
spm-repository-change-if-upstreamed: yes

# Allow compiling package even if it's not actually installed on system?
# Valid values are either "yes" or "no"
# Default is: no
not-installed: no

# Allow soft-blockers in the merge queue? Packages will be unmerged if yes.
# Valid values are either "yes" or "no"
# Default is: yes
soft-blocker: yes

# Allow package unmerges in the merge queue? Packages will be unmerged if yes.
# Valid values are either "yes" or "no"
# Default is: yes
unmerge: yes

# Allow dependencies to be pulled in?
# Valid values are either "yes" or "no"
# Default is: no
dependencies: yes

# Allow package downgrade?
# Valid values are either "yes" or "no"
# Default is: no
downgrade: no

# Allow package rebuild?
# Valid values are either "yes" or "no"
# Default is: no
rebuild: no

# Make possible to continue if one or more packages fail to build?
# Valid values are either "yes" or "no"
# Default is: no
keep-going: yes

# Allow new USE flags?
# Valid values are either "yes" or "no"
# Default is: no
new-useflags: yes

# Allow removed USE flags?
# Valid values are either "yes" or "no"
# Default is: no
removed-useflags: yes

# Package pre execution script hook
# Valid value is path to executable file
# Env vars:
# MATTER_PACKAGE_NAMES       = space sep. list of names of the packages
# that would be built. It does not reflect the name of the failing packages,
# because they could be just dependencies of them.
# pkgpre: /home/fabio/repos/entropy/services/matter_examples/pkgpre.sh

# Package build post execution script hook, executed for each package
# Valid value is path to executable file
# Env vars:
# MATTER_PACKAGE_NAMES       = space sep. list of names of the packages
# that would be built. It does not reflect the name of the failing packages,
# because they could be just dependencies of them.
# pkgpost: /home/fabio/repos/entropy/services/matter_examples/pkgpost.sh

# Env vars:
# MATTER_PACKAGE_NAMES       = space sep. list of names of the packages
# that would be built. It does not reflect the name of the failing packages,
# because they could be just dependencies of them.
# MATTER_PORTAGE_FAILED_PACKAGE_NAME = exact name (atom, CPV) of the failing
# package, the one that triggered the buildfail hook.
# MATTER_PORTAGE_REPOSITORY = Portage repository from where the package
# comes from
# MATTER_PORTAGE_BUILD_LOG_DIR = directory containing all the build logs of
# the failed package
buildfail: /particles/hooks/buildfail.sh

# For more info regarding exported environment variables, please see:
# matter --help
